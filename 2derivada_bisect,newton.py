# -*- coding: utf-8 -*-
"""2Derivada bisect,newton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14pop1Rj7XL-dmtVK8_ztMUDyXUh-8K7M
"""

import numpy as np
import matplotlib.pyplot as plt

"""Nessa linha, uma função chamada poly é definida. Essa função recebe três parâmetros: x, a, b e c (sendo a, b, e c com valores padrão de 1, -2 e -3, respectivamente). A função retorna o resultado da equação polinomial a*x**2 + b*x + c avaliada para o valor de x fornecido.

a de baixo
Nessa linha, outra função chamada dpoly é definida. Essa função recebe três parâmetros: x, a e b (sendo a e b com valores padrão de 1 e -2, respectivamente). A função retorna a derivada da função polinomial a*x**2 + b*x + c em relação a x, que é 2*a*x + b.
"""

def poly(x,a=1,b=-2, c=-3):
  return a*x**2 + b*x + c

def dpoly(x,a=1,b=-2):
  return 2*a*x + b

"""Nessa linha, uma sequência de valores é criada usando a função linspace do NumPy. Ela cria um array x com 101 pontos igualmente espaçados, começando de -2 e terminando em 4.


"""

x = np.linspace(-2,4,101)

"""Nessa linha, a função poly é chamada com o array x como argumento, calculando os valores correspondentes da função polinomial para cada valor de x no array."""

y = poly(x)

"""Nessas linhas, o gráfico é plotado usando o Matplotlib. plt.plot(x, y) cria o gráfico de linha com os valores de x no eixo x e os valores de y no eixo y. plt.grid() adiciona as linhas de grade ao gráfico e plt.show() exibe o gráfico na interface de exibição."""

plt.plot(x,y)
plt.grid()
plt.show()

"""Nessas linhas, uma função chamada bisect é definida. Essa função implementa o método da bissecção para encontrar o intervalo que contém uma raiz da função func. A função recebe quatro parâmetros: func (a função para encontrar a raiz), a (limite inferior do intervalo), b (limite superior do intervalo) e eps (precisão do cálculo). A função realiza um loop de bissecção para encontrar o intervalo onde a função muda de sinal e retorna esse intervalo como uma tupla (a, b)."""

def bisect(func,a,b,eps=1e-3):
  intervalo_serve = func(a)*func(b)
  if (intervalo_serve) <= 0:
    delta = 100.0
    while(delta > eps):
      x_med = (a+b)/2
      if func(x_med)*func(a) <=0:
        b = x_med
      else:
        a = x_med
      delta = abs(a-b)
      print(delta)
  return a,b

"""Nessas linhas, a função bisect é chamada para encontrar o intervalo que contém uma raiz da função polinomial poly, no intervalo de -2 a 4. O resultado é armazenado na variável intervalo e impresso na tela."""

intervalo = bisect(poly, a=-2, b=4, eps=1e-3)

print(intervalo)

"""Nessas linhas, a função bisect é chamada novamente para encontrar o intervalo que contém uma raiz da função polinomial poly, no intervalo de 1 a 4. O resultado é armazenado na variável intervalo e impresso na tela."""

intervalo = bisect(poly, a=1, b=4, eps=1e-3)

print(intervalo)

"""Nessas linhas, uma função chamada newton é definida. Essa função implementa o método de Newton para encontrar uma raiz da função func. A função recebe quatro parâmetros: func (a função para encontrar a raiz), dfunc (a derivada da função func), x_0 (o valor inicial para o método de Newton) e eps (precisão do cálculo). A função realiza um loop de iteração de Newton para encontrar uma raiz e retorna o valor da raiz encontrada."""

def newton(func, dfunc, x_0, eps):
  delta = 1e3
  x_i = x_0
  while(delta >= eps):
    x = x_i - func(x_i)/dfunc(x_i)
    delta = abs(x - x_i)
    print(delta)
    x_i = x
  return x_i

"""Nessas linhas, a função newton é chamada para encontrar uma raiz da função polinomial poly, usando o valor inicial x_0 como -2 e com precisão de 1e-3. O resultado é armazenado na variável raiz e impresso na tela."""

raiz = newton(poly, dpoly, x_0=-2, eps=1e-3)

print(raiz)

"""Nessas linhas, a função newton é chamada novamente para encontrar uma raiz da função polinomial poly, usando o valor inicial x_0 como 4 e com precisão de 1e-3. O resultado é armazenado na variável raiz e impresso na tela."""

raiz = newton(poly, dpoly, x_0=4, eps=1e-3)

print(raiz)

"""Nessas linhas, as funções poly e dpoly são redefinidas com um polinômio de grau 3. A função poly retorna o valor da função polinomial `a*x"""

def poly(x,a=1,b=-2, c=-3, d=3):
  return a*x**3 + b*x**2 + c*x

def dpoly(x,a=1,b=-2,c=-3):
  return 3*a*x**2 + 2*b*x + c

plt.plot(x,poly(x))
plt.grid()


# -*- coding: utf-8 -*-
"""Trabalho raizes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/148SWrpbpo2La-yf5g4wP9ZuNjb6M8pUb
"""

import numpy as np

def polinomio(x, coeffs):
    """
    Calcula o valor do polinômio para um dado valor de x e seus coeficientes.
    """
    n = len(coeffs)
    resultado = 0
    for i in range(n):
        resultado += coeffs[i] * x ** (n - i - 1)
    return resultado

def derivada(x, coeffs):
    """
    Calcula a derivada do polinômio para um dado valor de x e seus coeficientes.
    """
    n = len(coeffs)
    resultado = 0
    for i in range(n - 1):
        resultado += (n - i - 1) * coeffs[i] * x ** (n - i - 2)
    return resultado

def metodo_newton(polinomio, derivada, x0, max_iter=100, tol=1e-6):
    """
    Método de Newton para encontrar uma raiz de um polinômio.
    """
    x = x0
    for i in range(max_iter):
        fx = polinomio(x)
        dfx = derivada(x)
        x_novo = x - fx / dfx
        if abs(x_novo - x) < tol:
            return x_novo
        x = x_novo
    return None

def encontrar_raizes(coefficients):
    """
    Encontra todas as raízes reais e complexas de um polinômio dado seus coeficientes.
    """
    raizes = np.roots(coefficients)

    raizes_refinadas = []
    for raiz in raizes:
        if np.iscomplex(raiz):
            raizes_refinadas.append(metodo_newton(lambda x: polinomio(x, coefficients), lambda x: derivada(x, coefficients), raiz))
        else:
            raizes_refinadas.append(raiz)

    return raizes_refinadas

# Solicita que o usuário insira os coeficientes do polinômio
coeffs = []
grau = int(input("Digite o grau do polinômio: "))
for i in range(grau, -1, -1):
    coeficiente = float(input(f"Digite o coeficiente para x^{i}: "))
    coeffs.append(coeficiente)

# Encontra todas as raízes do polinômio
raizes = encontrar_raizes(coeffs)

print("\nRaízes reais e complexas encontradas:")
for raiz in raizes:
    print(raiz)

import numpy as np
import matplotlib.pyplot as plt

# Definindo a função
def funcao(x):
    return x**3 - 3*x**2 + 4*x - 2

# Gerando valores de x
x = np.linspace(-2, 4, 400)  # Intervalo de -2 a 4 com 400 pontos

# Calculando os valores de y
y = funcao(x)

# Criando o gráfico com a cor rosa forte
plt.figure(figsize=(8, 6))
plt.plot(x, y, color='#FF1493', label=r'$y = x^3 - 3x^2 + 4x - 2$')  # Código de cor rosa forte
plt.title('Gráfico da função $y = x^3 - 3x^2 + 4x - 2$')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.show()
# -*- coding: utf-8 -*-
"""3 scipy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rMqPjSJJTTjuGqtIuB7zKDrwXK1mLVhB

Nessa parte, estamos importando três bibliotecas:

numpy é usada para trabalhar com arrays e funções matemáticas de forma eficiente.
matplotlib.pyplot é utilizada para a plotagem de gráficos.
scipy.misc.derivative é uma função do SciPy usada para calcular derivadas numéricas de funções.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.misc import derivative

"""Aqui, temos duas funções definidas. A primeira função poly é um polinômio de terceiro grau, que toma um valor x e retorna o valor do polinômio para os coeficientes a, b, c e d.

A segunda função derivada_poly calcula a primeira e a segunda derivada do polinômio para os coeficientes a, b, c e d.
"""

def poly(x,a=1,b=2,c=-3,d=1):
  return a*x**3 + b*x**2 + c*x + d

def derivada_poly(x,a=1,b=2,c=-3,d=1):
  der_1 = 3*a*x**2 + 2*b*x + c
  der_2 = 6*a*x + 2*b
  return der_1, der_2

"""Nesta parte, criamos um array de 101 pontos igualmente espaçados no intervalo de -2 a 2 usando a função linspace do numpy. Em seguida, calculamos os valores y aplicando a função polinomial poly aos valores de x."""

x = np.linspace(-2,2,101)

y = poly(x)

"""Aqui, usamos a biblioteca matplotlib.pyplot para plotar o gráfico da função polinomial. x representa os pontos no eixo x e y representa os valores da função polinomial nos respectivos pontos."""

plt.plot(x,y)

"""Nesta parte, usamos a função derivative do scipy.misc para calcular as derivadas numéricas de primeira e segunda ordem da função polinomial poly. A derivada numérica é calculada usando um esquema de diferenças finitas de ordem 5 e um passo dx de 0.1."""

d_1 = derivative(poly,x,dx=0.1, n=1, order=5)
d_2 = derivative(poly,x,dx=0.1, n=2, order=5)

"""Aqui, calculamos as derivadas exatas de primeira e segunda ordem do polinômio usando a função derivada_poly definida anteriormente."""

d1_exato, d2_exato = derivada_poly(x)

"""Nesta parte, usamos plt.plot() para plotar os pontos das derivadas exatas (x, d1_exato) e (x, d2_exato) no gráfico, usando marcadores "o" e com transparência 0.5. Além disso, também plotamos as derivadas numéricas d_1 e d_2."""

plt.plot(x,d1_exato,'o',alpha=0.5)
plt.plot(x,d_1)

plt.plot(x,d2_exato,'o',alpha=0.5)
plt.plot(x,d_2)

"""Aqui, estamos usando a função np.diff() do NumPy para calcular as diferenças entre elementos consecutivos do array x. No entanto, esse resultado não está sendo armazenado em uma variável, então não terá impacto no restante do código."""

np.diff(x)

"""Nesta parte, importamos a biblioteca sympy e definimos dois símbolos x e y para serem usados em cálculos simbólicos."""

import sympy as sp
x,y=sp.symbols('x y')

"""Aqui, definimos uma expressão simbólica y = x**3 usando o símbolo x. Em seguida, calculamos a derivada da expressão y em relação a x usando sp.diff() e imprimimos o resultado."""

y = x**3

print(y)

g = sp.diff(y,x)

print(g)

type(x)
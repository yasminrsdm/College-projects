# -*- coding: utf-8 -*-
"""1Derivadaloglog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FdNs0_iE-zb119P9vdNTdsto_68pd5Z5
"""

import matplotlib.pyplot as plt
import numpy as np

def derivada(func,x,h):
  central = (func(x+h)-func(x-h))/(2*h)
  adiantada = (func(x+h) - func(x))/h
  atrasada  = (func(x)  - func(x-h))/h
  return central, adiantada, atrasada

angulos = np.linspace(0,2*np.pi,101)
f = np.sin(angulos)
g = np.cos(angulos)

derivadas = derivada(np.sin,angulos, h=0.2)

type(derivadas)

len(derivadas)

np.shape(derivadas[0])

def erros(x,y,):
  err = np.abs((x-y)/y)
  return err

plt.plot(angulos, g, label='cos')
plt.plot(angulos, derivadas[0],'s', label='central', alpha=0.5)
plt.plot(angulos, derivadas[1],'^', label='adiantada', alpha=0.5)
plt.plot(angulos, derivadas[2],'o', label='atrasada', alpha=0.5)
plt.legend()
plt.legend()
plt.grid()
plt.show()

erros(derivadas[0],g)

angulo_1 = np.pi
angulo_2 = np.pi/2.0
H = [1,0.8,0.5,0.2,0.1,0.05,0.01,0.005,0.001]

err_central = []
err_adiantado = []
for h in H:
  derivs_1 = derivada(np.sin,angulo_1,h)
  derivs_2 = derivada(np.sin,angulo_2,h)
  err_1 = abs(derivs_1[0] - np.cos(angulo_1))
  err_2 = abs(derivs_2[1] - np.cos(angulo_2))
  err_central.append(err_1)
  err_adiantado.append(err_2)

plt.loglog(H, err_central, label="cental")
plt.loglog(H, err_adiantado, label = "adiantado")
plt.legend()
plt.show()

"""Vou explicar o que está acontecendo em cada linha do código:

1. `import matplotlib.pyplot as plt`: Importa a biblioteca `matplotlib` e a renomeia como `plt`. Isso permitirá criar gráficos.

2. `import numpy as np`: Importa a biblioteca `numpy` e a renomeia como `np`. O `numpy` é uma biblioteca amplamente utilizada para trabalhar com arrays e funções matemáticas.

3. `def derivada(func,x,h)`: Define uma função chamada `derivada` com três parâmetros: `func`, `x` e `h`.

4. `central = (func(x+h)-func(x-h))/(2*h)`: Calcula a derivada central de `func` no ponto `x` usando um passo `h`.

5. `adiantada = (func(x+h) - func(x))/h`: Calcula a derivada adiantada de `func` no ponto `x` usando um passo `h`.

6. `atrasada = (func(x)  - func(x-h))/h`: Calcula a derivada atrasada de `func` no ponto `x` usando um passo `h`.

7. `return central, adiantada, atrasada`: Retorna uma tupla contendo as três derivadas calculadas.

8. `angulos = np.linspace(0,2*np.pi,101)`: Cria uma lista de 101 ângulos uniformemente espaçados entre 0 e 2*pi (um ciclo completo).

9. `f = np.sin(angulos)`: Calcula o seno de cada ângulo da lista `angulos` e armazena os resultados em `f`.

10. `g = np.cos(angulos)`: Calcula o cosseno de cada ângulo da lista `angulos` e armazena os resultados em `g`.

11. `derivadas = derivada(np.sin, angulos, h=0.2)`: Calcula as derivadas central, adiantada e atrasada da função seno (`np.sin`) nos pontos especificados em `angulos` usando um passo `h=0.2`. Os resultados são armazenados em `derivadas`.

12. `type(derivadas)`: Retorna o tipo do objeto `derivadas`, que é uma tupla.

13. `len(derivadas)`: Retorna o tamanho (número de elementos) da tupla `derivadas`, que é 3, pois contém três derivadas.

14. `np.shape(derivadas[0])`: Retorna a forma (dimensões) do primeiro elemento da tupla `derivadas`, que é uma saída unidimensional (um array) com o mesmo tamanho que `angulos`.

15. `def erros(x, y)`: Define uma função chamada `erros` com dois parâmetros: `x` e `y`.

16. `err = np.abs((x-y)/y)`: Calcula o erro absoluto entre `x` e `y` e armazena o resultado em `err`.

17. `plt.plot(angulos, g, label='cos')`: Plota o gráfico do cosseno em função dos ângulos.

18. `plt.plot(angulos, derivadas[0], 's', label='central', alpha=0.5)`: Plota os pontos da derivada central em função dos ângulos usando marcadores quadrados ('s') e os rotula com a legenda "central". O argumento `alpha=0.5` controla a transparência dos marcadores.

19. `plt.plot(angulos, derivadas[1], '^', label='adiantada', alpha=0.5)`: Plota os pontos da derivada adiantada em função dos ângulos usando marcadores triangulares ('^') e os rotula com a legenda "adiantada". O argumento `alpha=0.5` controla a transparência dos marcadores.

20. `plt.plot(angulos, derivadas[2], 'o', label='atrasada', alpha=0.5)`: Plota os pontos da derivada atrasada em função dos ângulos usando marcadores circulares ('o') e os rotula com a legenda "atrasada". O argumento `alpha=0.5` controla a transparência dos marcadores.

21. `plt.legend()`: Adiciona uma legenda ao gráfico com base nas labels especificadas nos comandos `plt.plot()`.

22. `plt.grid()`: Adiciona uma grade ao gráfico.

23. `plt.show()`: Exibe o gráfico.

24. `erros(derivadas[0], g)`: Chama a função `erros` com os argumentos `derivadas[0]` (derivada central) e `g` (cosseno) e calcula o erro absoluto entre eles.

25. `angulo_1 = np.pi`: Atribui o valor de pi (π) à variável `angulo_1`.

26. `angulo_2 = np.pi/2.0`: Atribui o valor de π/2 (meio círculo) à variável `angulo_2`.

27. `H = [1, 0.8, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001]`: Cria uma lista com valores de `h` para serem usados no cálculo dos erros.

28. `err_central = []`: Inicializa uma lista vazia chamada `err_central` para armazenar os erros da derivada central.

29. `err_adiantado = []`: Inicializa uma lista vazia chamada `err_adiantado` para armazenar os erros da derivada adiantada.

30. O código a seguir utiliza um loop `for` para calcular os erros das derivadas central e adiantada para diferentes valores de `h`, armazenando os resultados nas listas `err_central` e `err_adiantado`.

31. `plt.loglog(H, err_central, label="cental")`: Plota um gráfico de log-log dos erros da derivada central em função dos valores de `h` da lista `H`. O argumento `label="cental"` define a legenda para essa curva.

32. `plt.loglog(H, err_adiantado, label="adiantado")`: Plota um gráfico de log-log dos erros da derivada adiantada em função dos valores de `h` da lista `H`. O argumento `label="adiantado"` define a legenda para essa curva.

33. `plt.legend()`: Adiciona uma legenda ao gráfico com base nas labels especificadas nos comandos `plt.loglog()`.

34. `plt.show()`: Exibe o gráfico.
"""